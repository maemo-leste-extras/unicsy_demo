#!/usr/bin/python2
# apt install python-gtk2

import sys
import pygtk
pygtk.require('2.0')

import gtk
import os
import pango

# On N900, when used by single hand, right portion of screen is usable
# in horizontal mode, and whole screen is usable in vertical mode,
# with bottom portions maybe being slightly easier to access.

class TouchWidgets:
    def __init__(m):
        pass

    def big(m, s):
        return '<span size="x-large">%s</span>' % s

    def middle(m, s):
        return '<span size="medium">%s</span>' % s
    
    def small(m, s):
        return '<small>%s</small>' % s

    def font_label(m, s):
        w = gtk.Label(s)
        w.set_use_markup(True)
        return w
        
    def font_button(m, s):
        w = m.font_label(s)
        w1 = gtk.Button()
        w1.add(w)
        return w, w1

    def font_entry(m, size = 32, font=""):
        e = gtk.Entry()
        e.modify_font(pango.FontDescription("sans "+str(size)))
        return e

    def big_button(m, big, small):
        return m.font_button(m.big(big) + '\n' + m.small(small))

class TouchWindow(TouchWidgets):
    def __init__(m):
        m.main_window = 0
        m.window = None

    def close(m):
        m.window.destroy()
        if m.main_window:
            gtk.main_quit()

    def basic_main_window(m):
        m.basic_window()
        m.main_window = 1

    def gtk_main(m):
        gtk.main()

    def basic_window(m):
        window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        window.set_default_size(800, 400)
        window.set_border_width(3)
        #window.maximize()
        m.window = window
        table = m.interior()

        window.add(table)
        window.show_all()
        m.window.connect("delete-event", lambda _, _1: m.close())

class AboutWindow(TouchWindow):
    def root_command(m, s):
        os.system("osso-xterm 'sudo %s'" % s)

    def action(m, title, action, descripton):
        box = gtk.HBox()
        _, button = m.font_button(title)
        button.connect("clicked", action)
        label = m.font_label(descripton)
        label.set_line_wrap(True)
        box.add(button)
        box.add(label)
        return box, button, label
        
    def interior(m):
        table = gtk.Table(10, 6, False)

        l, b = m.font_button(m.big("Close"))
        b.connect("clicked", lambda _: m.close())
        table.attach(b, 8, 10, 0, 1)

        l, b = m.font_button(m.big("Grow\n")+"SD partition")
        b.connect("clicked", lambda _: m.root_command("/etc/expandcard.sh"))
        table.attach(b, 8, 10, 1, 2)

        l, b = m.font_button("Set\n"+m.big("root\n")+"password")
        b.connect("clicked", lambda _: m.root_command("passwd"))
        table.attach(b, 8, 10, 2, 3)

        l, b = m.font_button("Set\n"+m.big("user\n")+"password")
        b.connect("clicked", lambda _: m.root_command("passwd user"))
        table.attach(b, 8, 10, 3, 4)

        welcome = ("""Welcome to the Maemo Leste; Maemo Leste continues the legacy of Maemo. We aim to provide a free Maemo experience on mobile phones and tablets like the Nokia N900, Motorola Droid 4, Allwinner Tablets and more.

More information is at https://maemo-leste.github.io/

""")
        details = (m.middle("Grow SD Partition: ")+"Installation images use small fixed partition size. Press the button to grow partition to the available space.\n"+
              m.middle("Set passwords: ")+"You can set root and user passwords. User account username is 'user'.\n"+
              m.middle("USB networking: ")+"Connect USB cable, and you can connect to 192.168.2.XXX using ssh.\n")

        fill = """
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc.
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

"""

        l = m.font_label(m.big("Maemo Leste")+"\n"+
                         "Version 20190324\n\n"+welcome+details)
        #l.set_justify(GTK_JUSTIFY_CENTER)
        l.set_line_wrap(True)

        t = gtk.VBox()
        t.add(l)

        box, label, button = m.action(m.big("Grow\n")+"SD partition",
        	lambda _: m.root_command("/etc/expandcard.sh"),
                "Installation images use small fixed partition size. Press the button to grow partition to the available space."
                )
        t.add(box)


        scrolled = gtk.ScrolledWindow()
        scrolled.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_ALWAYS)
        scrolled.add_with_viewport(t)
        #scrolled.set_kinetic_scrolling(True)
        table.attach(scrolled, 0, 8, 0, 6)
        return table

if __name__ == "__main__":
    test = AboutWindow()
    test.basic_main_window()
    test.gtk_main()

